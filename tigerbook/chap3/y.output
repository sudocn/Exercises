State 0 conflicts: 1 shift/reduce
State 1 conflicts: 1 shift/reduce
State 2 conflicts: 6 shift/reduce
State 4 conflicts: 1 shift/reduce
State 5 conflicts: 1 shift/reduce
State 6 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 26 conflicts: 1 shift/reduce
State 27 conflicts: 1 shift/reduce
State 39 conflicts: 6 shift/reduce
State 52 conflicts: 1 shift/reduce
State 53 conflicts: 1 shift/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 59 conflicts: 1 shift/reduce
State 61 conflicts: 1 shift/reduce
State 69 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 72 conflicts: 1 shift/reduce
State 73 conflicts: 1 shift/reduce
State 77 conflicts: 1 shift/reduce
State 79 conflicts: 6 shift/reduce
State 80 conflicts: 6 shift/reduce
State 81 conflicts: 6 shift/reduce
State 82 conflicts: 6 shift/reduce
State 83 conflicts: 12 shift/reduce
State 84 conflicts: 12 shift/reduce
State 85 conflicts: 12 shift/reduce
State 88 conflicts: 12 shift/reduce
State 89 conflicts: 1 shift/reduce
State 92 conflicts: 1 shift/reduce
State 96 conflicts: 13 shift/reduce
State 97 conflicts: 12 shift/reduce
State 101 conflicts: 1 shift/reduce
State 106 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 120 conflicts: 12 shift/reduce
State 121 conflicts: 12 shift/reduce
State 125 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 135 conflicts: 12 shift/reduce
State 140 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 decs: /* empty */
    3     | dec decs

    4 dec: tydec
    5    | vardec
    6    | fundec

    7 tydec: TYPE ID EQ ty

    8 ty: ID
    9   | LBRACE tyfields RBRACE
   10   | ARRAY OF ID

   11 tyfields: /* empty */
   12         | ID COLON ID
   13         | ID COLON ID COMMA tyfields

   14 vardec: VAR ID ASSIGN exp
   15       | VAR ID COLON ID ASSIGN exp

   16 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   17       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   18 exp: /* empty */
   19    | lvalue
   20    | LPAREN explist RPAREN
   21    | INT
   22    | NIL
   23    | STRING
   24    | funcall_exp
   25    | arith_exp
   26    | comp_exp
   27    | strcomp_exp
   28    | boolop_exp
   29    | rec_exp
   30    | arr_exp
   31    | assign_exp
   32    | if_exp
   33    | while_exp
   34    | for_exp
   35    | BREAK
   36    | LET decs IN explist END

   37 lvalue: ID
   38       | lvalue DOT ID
   39       | lvalue LBRACK exp RBRACK

   40 arith_exp: exp PLUS exp
   41          | exp MINUS exp
   42          | exp TIMES exp
   43          | exp DIVIDE exp
   44          | MINUS exp

   45 funcall_exp: ID LPAREN arglist RPAREN

   46 comp_exp: exp comp_op exp

   47 strcomp_exp: STRING comp_op STRING

   48 comp_op: EQ
   49        | NEQ
   50        | LT
   51        | LE
   52        | GT
   53        | GE

   54 boolop_exp: exp AND exp
   55           | exp OR exp

   56 rec_exp: ID NIL
   57        | ID LBRACE rec_list RBRACE

   58 rec_list: /* empty */
   59         | rec_item
   60         | rec_item COMMA rec_list

   61 rec_item: ID EQ exp

   62 arr_exp: ID LBRACK exp RBRACK OF exp

   63 assign_exp: lvalue ASSIGN exp

   64 if_exp: IF exp THEN exp
   65       | IF exp THEN exp ELSE exp

   66 while_exp: WHILE exp DO exp

   67 for_exp: FOR ID ASSIGN exp TO exp DO exp

   68 explist: exp
   69        | exp SEMICOLON explist

   70 arglist: exp
   71        | exp COMMA arglist


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 8 10 12 13 14 15 16 17 37 38 45 56 57 61 62 67
STRING (259) 23 47
INT (260) 21
COMMA (261) 13 60 71
COLON (262) 12 13 15 17
SEMICOLON (263) 69
LPAREN (264) 16 17 20 45
RPAREN (265) 16 17 20 45
LBRACK (266) 39 62
RBRACK (267) 39 62
LBRACE (268) 9 57
RBRACE (269) 9 57
DOT (270) 38
PLUS (271) 40
MINUS (272) 41 44
TIMES (273) 42
DIVIDE (274) 43
EQ (275) 7 16 17 48 61
NEQ (276) 49
LT (277) 50
LE (278) 51
GT (279) 52
GE (280) 53
UMINUS (281)
AND (282) 54
OR (283) 55
ASSIGN (284) 14 15 63 67
ARRAY (285) 10
IF (286) 64 65
THEN (287) 64 65
ELSE (288) 65
WHILE (289) 66
FOR (290) 67
TO (291) 67
DO (292) 66 67
LET (293) 36
IN (294) 36
END (295) 36
OF (296) 10 62
BREAK (297) 35
NIL (298) 22 56
FUNCTION (299) 16 17
VAR (300) 14 15
TYPE (301) 7


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
decs (49)
    on left: 2 3, on right: 3 36
dec (50)
    on left: 4 5 6, on right: 3
tydec (51)
    on left: 7, on right: 4
ty (52)
    on left: 8 9 10, on right: 7
tyfields (53)
    on left: 11 12 13, on right: 9 13 16 17
vardec (54)
    on left: 14 15, on right: 5
fundec (55)
    on left: 16 17, on right: 6
exp (56)
    on left: 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
    36, on right: 1 14 15 16 17 39 40 41 42 43 44 46 54 55 61 62 63
    64 65 66 67 68 69 70 71
lvalue (57)
    on left: 37 38 39, on right: 19 38 39 63
arith_exp (58)
    on left: 40 41 42 43 44, on right: 25
funcall_exp (59)
    on left: 45, on right: 24
comp_exp (60)
    on left: 46, on right: 26
strcomp_exp (61)
    on left: 47, on right: 27
comp_op (62)
    on left: 48 49 50 51 52 53, on right: 46 47
boolop_exp (63)
    on left: 54 55, on right: 28
rec_exp (64)
    on left: 56 57, on right: 29
rec_list (65)
    on left: 58 59 60, on right: 57 60
rec_item (66)
    on left: 61, on right: 59 60
arr_exp (67)
    on left: 62, on right: 30
assign_exp (68)
    on left: 63, on right: 31
if_exp (69)
    on left: 64 65, on right: 32
while_exp (70)
    on left: 66, on right: 33
for_exp (71)
    on left: 67, on right: 34
explist (72)
    on left: 68 69, on right: 20 36 69
arglist (73)
    on left: 70 71, on right: 45 71


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    program      go to state 12
    exp          go to state 13
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 1

   37 lvalue: ID .
   45 funcall_exp: ID . LPAREN arglist RPAREN
   56 rec_exp: ID . NIL
   57        | ID . LBRACE rec_list RBRACE
   62 arr_exp: ID . LBRACK exp RBRACK OF exp

    LPAREN  shift, and go to state 26
    LBRACK  shift, and go to state 27
    LBRACE  shift, and go to state 28
    NIL     shift, and go to state 29

    LBRACK    [reduce using rule 37 (lvalue)]
    $default  reduce using rule 37 (lvalue)


state 2

   23 exp: STRING .
   47 strcomp_exp: STRING . comp_op STRING

    EQ   shift, and go to state 30
    NEQ  shift, and go to state 31
    LT   shift, and go to state 32
    LE   shift, and go to state 33
    GT   shift, and go to state 34
    GE   shift, and go to state 35

    EQ        [reduce using rule 23 (exp)]
    NEQ       [reduce using rule 23 (exp)]
    LT        [reduce using rule 23 (exp)]
    LE        [reduce using rule 23 (exp)]
    GT        [reduce using rule 23 (exp)]
    GE        [reduce using rule 23 (exp)]
    $default  reduce using rule 23 (exp)

    comp_op  go to state 36


state 3

   21 exp: INT .

    $default  reduce using rule 21 (exp)


state 4

   20 exp: LPAREN . explist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 37
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25
    explist      go to state 38


state 5

   44 arith_exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 39
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 6

   64 if_exp: IF . exp THEN exp
   65       | IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 40
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 7

   66 while_exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 41
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 8

   67 for_exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 42


state 9

   36 exp: LET . decs IN explist END

    FUNCTION  shift, and go to state 43
    VAR       shift, and go to state 44
    TYPE      shift, and go to state 45

    $default  reduce using rule 2 (decs)

    decs    go to state 46
    dec     go to state 47
    tydec   go to state 48
    vardec  go to state 49
    fundec  go to state 50


state 10

   35 exp: BREAK .

    $default  reduce using rule 35 (exp)


state 11

   22 exp: NIL .

    $default  reduce using rule 22 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 51


state 13

    1 program: exp .
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 1 (program)

    comp_op  go to state 58


state 14

   19 exp: lvalue .
   38 lvalue: lvalue . DOT ID
   39       | lvalue . LBRACK exp RBRACK
   63 assign_exp: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 59
    DOT     shift, and go to state 60
    ASSIGN  shift, and go to state 61

    $default  reduce using rule 19 (exp)


state 15

   25 exp: arith_exp .

    $default  reduce using rule 25 (exp)


state 16

   24 exp: funcall_exp .

    $default  reduce using rule 24 (exp)


state 17

   26 exp: comp_exp .

    $default  reduce using rule 26 (exp)


state 18

   27 exp: strcomp_exp .

    $default  reduce using rule 27 (exp)


state 19

   28 exp: boolop_exp .

    $default  reduce using rule 28 (exp)


state 20

   29 exp: rec_exp .

    $default  reduce using rule 29 (exp)


state 21

   30 exp: arr_exp .

    $default  reduce using rule 30 (exp)


state 22

   31 exp: assign_exp .

    $default  reduce using rule 31 (exp)


state 23

   32 exp: if_exp .

    $default  reduce using rule 32 (exp)


state 24

   33 exp: while_exp .

    $default  reduce using rule 33 (exp)


state 25

   34 exp: for_exp .

    $default  reduce using rule 34 (exp)


state 26

   45 funcall_exp: ID LPAREN . arglist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 62
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25
    arglist      go to state 63


state 27

   62 arr_exp: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 64
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 28

   57 rec_exp: ID LBRACE . rec_list RBRACE

    ID  shift, and go to state 65

    $default  reduce using rule 58 (rec_list)

    rec_list  go to state 66
    rec_item  go to state 67


state 29

   56 rec_exp: ID NIL .

    $default  reduce using rule 56 (rec_exp)


state 30

   48 comp_op: EQ .

    $default  reduce using rule 48 (comp_op)


state 31

   49 comp_op: NEQ .

    $default  reduce using rule 49 (comp_op)


state 32

   50 comp_op: LT .

    $default  reduce using rule 50 (comp_op)


state 33

   51 comp_op: LE .

    $default  reduce using rule 51 (comp_op)


state 34

   52 comp_op: GT .

    $default  reduce using rule 52 (comp_op)


state 35

   53 comp_op: GE .

    $default  reduce using rule 53 (comp_op)


state 36

   47 strcomp_exp: STRING comp_op . STRING

    STRING  shift, and go to state 68


state 37

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   68 explist: exp .
   69        | exp . SEMICOLON explist

    SEMICOLON  shift, and go to state 69
    PLUS       shift, and go to state 52
    MINUS      shift, and go to state 53
    TIMES      shift, and go to state 54
    DIVIDE     shift, and go to state 55
    EQ         shift, and go to state 30
    NEQ        shift, and go to state 31
    LT         shift, and go to state 32
    LE         shift, and go to state 33
    GT         shift, and go to state 34
    GE         shift, and go to state 35
    AND        shift, and go to state 56
    OR         shift, and go to state 57

    $default  reduce using rule 68 (explist)

    comp_op  go to state 58


state 38

   20 exp: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 70


state 39

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   44          | MINUS exp .
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    LT   shift, and go to state 32
    LE   shift, and go to state 33
    GT   shift, and go to state 34
    GE   shift, and go to state 35
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LT        [reduce using rule 44 (arith_exp)]
    LE        [reduce using rule 44 (arith_exp)]
    GT        [reduce using rule 44 (arith_exp)]
    GE        [reduce using rule 44 (arith_exp)]
    AND       [reduce using rule 44 (arith_exp)]
    OR        [reduce using rule 44 (arith_exp)]
    $default  reduce using rule 44 (arith_exp)

    comp_op  go to state 58


state 40

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   64 if_exp: IF exp . THEN exp
   65       | IF exp . THEN exp ELSE exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    THEN    shift, and go to state 71

    comp_op  go to state 58


state 41

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   66 while_exp: WHILE exp . DO exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    DO      shift, and go to state 72

    comp_op  go to state 58


state 42

   67 for_exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 73


state 43

   16 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   17       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 74


state 44

   14 vardec: VAR . ID ASSIGN exp
   15       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 75


state 45

    7 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 76


state 46

   36 exp: LET decs . IN explist END

    IN  shift, and go to state 77


state 47

    3 decs: dec . decs

    FUNCTION  shift, and go to state 43
    VAR       shift, and go to state 44
    TYPE      shift, and go to state 45

    $default  reduce using rule 2 (decs)

    decs    go to state 78
    dec     go to state 47
    tydec   go to state 48
    vardec  go to state 49
    fundec  go to state 50


state 48

    4 dec: tydec .

    $default  reduce using rule 4 (dec)


state 49

    5 dec: vardec .

    $default  reduce using rule 5 (dec)


state 50

    6 dec: fundec .

    $default  reduce using rule 6 (dec)


state 51

    0 $accept: program $end .

    $default  accept


state 52

   40 arith_exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 79
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 53

   41 arith_exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 80
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 54

   42 arith_exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 81
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 55

   43 arith_exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 82
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 56

   54 boolop_exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 83
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 57

   55 boolop_exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 84
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 58

   46 comp_exp: exp comp_op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 85
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 59

   39 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 86
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 60

   38 lvalue: lvalue DOT . ID

    ID  shift, and go to state 87


state 61

   63 assign_exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 88
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 62

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   70 arglist: exp .
   71        | exp . COMMA arglist

    COMMA   shift, and go to state 89
    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 70 (arglist)

    comp_op  go to state 58


state 63

   45 funcall_exp: ID LPAREN arglist . RPAREN

    RPAREN  shift, and go to state 90


state 64

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   62 arr_exp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 91
    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    comp_op  go to state 58


state 65

   61 rec_item: ID . EQ exp

    EQ  shift, and go to state 92


state 66

   57 rec_exp: ID LBRACE rec_list . RBRACE

    RBRACE  shift, and go to state 93


state 67

   59 rec_list: rec_item .
   60         | rec_item . COMMA rec_list

    COMMA  shift, and go to state 94

    $default  reduce using rule 59 (rec_list)


state 68

   47 strcomp_exp: STRING comp_op STRING .

    $default  reduce using rule 47 (strcomp_exp)


state 69

   69 explist: exp SEMICOLON . explist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 37
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25
    explist      go to state 95


state 70

   20 exp: LPAREN explist RPAREN .

    $default  reduce using rule 20 (exp)


state 71

   64 if_exp: IF exp THEN . exp
   65       | IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 96
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 72

   66 while_exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 97
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 73

   67 for_exp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 98
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 74

   16 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   17       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 99


state 75

   14 vardec: VAR ID . ASSIGN exp
   15       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 100
    ASSIGN  shift, and go to state 101


state 76

    7 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 102


state 77

   36 exp: LET decs IN . explist END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 37
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25
    explist      go to state 103


state 78

    3 decs: dec decs .

    $default  reduce using rule 3 (decs)


state 79

   40 arith_exp: exp . PLUS exp
   40          | exp PLUS exp .
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    LT        [reduce using rule 40 (arith_exp)]
    LE        [reduce using rule 40 (arith_exp)]
    GT        [reduce using rule 40 (arith_exp)]
    GE        [reduce using rule 40 (arith_exp)]
    AND       [reduce using rule 40 (arith_exp)]
    OR        [reduce using rule 40 (arith_exp)]
    $default  reduce using rule 40 (arith_exp)

    comp_op  go to state 58


state 80

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   41          | exp MINUS exp .
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    LT        [reduce using rule 41 (arith_exp)]
    LE        [reduce using rule 41 (arith_exp)]
    GT        [reduce using rule 41 (arith_exp)]
    GE        [reduce using rule 41 (arith_exp)]
    AND       [reduce using rule 41 (arith_exp)]
    OR        [reduce using rule 41 (arith_exp)]
    $default  reduce using rule 41 (arith_exp)

    comp_op  go to state 58


state 81

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   42          | exp TIMES exp .
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    LT   shift, and go to state 32
    LE   shift, and go to state 33
    GT   shift, and go to state 34
    GE   shift, and go to state 35
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LT        [reduce using rule 42 (arith_exp)]
    LE        [reduce using rule 42 (arith_exp)]
    GT        [reduce using rule 42 (arith_exp)]
    GE        [reduce using rule 42 (arith_exp)]
    AND       [reduce using rule 42 (arith_exp)]
    OR        [reduce using rule 42 (arith_exp)]
    $default  reduce using rule 42 (arith_exp)

    comp_op  go to state 58


state 82

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   43          | exp DIVIDE exp .
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    LT   shift, and go to state 32
    LE   shift, and go to state 33
    GT   shift, and go to state 34
    GE   shift, and go to state 35
    AND  shift, and go to state 56
    OR   shift, and go to state 57

    LT        [reduce using rule 43 (arith_exp)]
    LE        [reduce using rule 43 (arith_exp)]
    GT        [reduce using rule 43 (arith_exp)]
    GE        [reduce using rule 43 (arith_exp)]
    AND       [reduce using rule 43 (arith_exp)]
    OR        [reduce using rule 43 (arith_exp)]
    $default  reduce using rule 43 (arith_exp)

    comp_op  go to state 58


state 83

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   54           | exp AND exp .
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 54 (boolop_exp)]
    MINUS     [reduce using rule 54 (boolop_exp)]
    TIMES     [reduce using rule 54 (boolop_exp)]
    DIVIDE    [reduce using rule 54 (boolop_exp)]
    EQ        [reduce using rule 54 (boolop_exp)]
    NEQ       [reduce using rule 54 (boolop_exp)]
    LT        [reduce using rule 54 (boolop_exp)]
    LE        [reduce using rule 54 (boolop_exp)]
    GT        [reduce using rule 54 (boolop_exp)]
    GE        [reduce using rule 54 (boolop_exp)]
    AND       [reduce using rule 54 (boolop_exp)]
    OR        [reduce using rule 54 (boolop_exp)]
    $default  reduce using rule 54 (boolop_exp)

    comp_op  go to state 58


state 84

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   55           | exp OR exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 55 (boolop_exp)]
    MINUS     [reduce using rule 55 (boolop_exp)]
    TIMES     [reduce using rule 55 (boolop_exp)]
    DIVIDE    [reduce using rule 55 (boolop_exp)]
    EQ        [reduce using rule 55 (boolop_exp)]
    NEQ       [reduce using rule 55 (boolop_exp)]
    LT        [reduce using rule 55 (boolop_exp)]
    LE        [reduce using rule 55 (boolop_exp)]
    GT        [reduce using rule 55 (boolop_exp)]
    GE        [reduce using rule 55 (boolop_exp)]
    AND       [reduce using rule 55 (boolop_exp)]
    OR        [reduce using rule 55 (boolop_exp)]
    $default  reduce using rule 55 (boolop_exp)

    comp_op  go to state 58


state 85

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   46         | exp comp_op exp .
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 46 (comp_exp)]
    MINUS     [reduce using rule 46 (comp_exp)]
    TIMES     [reduce using rule 46 (comp_exp)]
    DIVIDE    [reduce using rule 46 (comp_exp)]
    EQ        [reduce using rule 46 (comp_exp)]
    NEQ       [reduce using rule 46 (comp_exp)]
    LT        [reduce using rule 46 (comp_exp)]
    LE        [reduce using rule 46 (comp_exp)]
    GT        [reduce using rule 46 (comp_exp)]
    GE        [reduce using rule 46 (comp_exp)]
    AND       [reduce using rule 46 (comp_exp)]
    OR        [reduce using rule 46 (comp_exp)]
    $default  reduce using rule 46 (comp_exp)

    comp_op  go to state 58


state 86

   39 lvalue: lvalue LBRACK exp . RBRACK
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    RBRACK  shift, and go to state 104
    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    comp_op  go to state 58


state 87

   38 lvalue: lvalue DOT ID .

    $default  reduce using rule 38 (lvalue)


state 88

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   63 assign_exp: lvalue ASSIGN exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 63 (assign_exp)]
    MINUS     [reduce using rule 63 (assign_exp)]
    TIMES     [reduce using rule 63 (assign_exp)]
    DIVIDE    [reduce using rule 63 (assign_exp)]
    EQ        [reduce using rule 63 (assign_exp)]
    NEQ       [reduce using rule 63 (assign_exp)]
    LT        [reduce using rule 63 (assign_exp)]
    LE        [reduce using rule 63 (assign_exp)]
    GT        [reduce using rule 63 (assign_exp)]
    GE        [reduce using rule 63 (assign_exp)]
    AND       [reduce using rule 63 (assign_exp)]
    OR        [reduce using rule 63 (assign_exp)]
    $default  reduce using rule 63 (assign_exp)

    comp_op  go to state 58


state 89

   71 arglist: exp COMMA . arglist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 62
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25
    arglist      go to state 105


state 90

   45 funcall_exp: ID LPAREN arglist RPAREN .

    $default  reduce using rule 45 (funcall_exp)


state 91

   62 arr_exp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 106


state 92

   61 rec_item: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 107
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 93

   57 rec_exp: ID LBRACE rec_list RBRACE .

    $default  reduce using rule 57 (rec_exp)


state 94

   60 rec_list: rec_item COMMA . rec_list

    ID  shift, and go to state 65

    $default  reduce using rule 58 (rec_list)

    rec_list  go to state 108
    rec_item  go to state 67


state 95

   69 explist: exp SEMICOLON explist .

    $default  reduce using rule 69 (explist)


state 96

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   64 if_exp: IF exp THEN exp .
   65       | IF exp THEN exp . ELSE exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    ELSE    shift, and go to state 109

    PLUS      [reduce using rule 64 (if_exp)]
    MINUS     [reduce using rule 64 (if_exp)]
    TIMES     [reduce using rule 64 (if_exp)]
    DIVIDE    [reduce using rule 64 (if_exp)]
    EQ        [reduce using rule 64 (if_exp)]
    NEQ       [reduce using rule 64 (if_exp)]
    LT        [reduce using rule 64 (if_exp)]
    LE        [reduce using rule 64 (if_exp)]
    GT        [reduce using rule 64 (if_exp)]
    GE        [reduce using rule 64 (if_exp)]
    AND       [reduce using rule 64 (if_exp)]
    OR        [reduce using rule 64 (if_exp)]
    ELSE      [reduce using rule 64 (if_exp)]
    $default  reduce using rule 64 (if_exp)

    comp_op  go to state 58


state 97

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   66 while_exp: WHILE exp DO exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 66 (while_exp)]
    MINUS     [reduce using rule 66 (while_exp)]
    TIMES     [reduce using rule 66 (while_exp)]
    DIVIDE    [reduce using rule 66 (while_exp)]
    EQ        [reduce using rule 66 (while_exp)]
    NEQ       [reduce using rule 66 (while_exp)]
    LT        [reduce using rule 66 (while_exp)]
    LE        [reduce using rule 66 (while_exp)]
    GT        [reduce using rule 66 (while_exp)]
    GE        [reduce using rule 66 (while_exp)]
    AND       [reduce using rule 66 (while_exp)]
    OR        [reduce using rule 66 (while_exp)]
    $default  reduce using rule 66 (while_exp)

    comp_op  go to state 58


state 98

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   67 for_exp: FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    TO      shift, and go to state 110

    comp_op  go to state 58


state 99

   16 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   17       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 111

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 112


state 100

   15 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 113


state 101

   14 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 114
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 102

    7 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 115
    LBRACE  shift, and go to state 116
    ARRAY   shift, and go to state 117

    ty  go to state 118


state 103

   36 exp: LET decs IN explist . END

    END  shift, and go to state 119


state 104

   39 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 39 (lvalue)


state 105

   71 arglist: exp COMMA arglist .

    $default  reduce using rule 71 (arglist)


state 106

   62 arr_exp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 120
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 107

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   61 rec_item: ID EQ exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 61 (rec_item)

    comp_op  go to state 58


state 108

   60 rec_list: rec_item COMMA rec_list .

    $default  reduce using rule 60 (rec_list)


state 109

   65 if_exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 121
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 110

   67 for_exp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 122
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 111

   12 tyfields: ID . COLON ID
   13         | ID . COLON ID COMMA tyfields

    COLON  shift, and go to state 123


state 112

   16 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   17       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 124


state 113

   15 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 125


state 114

   14 vardec: VAR ID ASSIGN exp .
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 14 (vardec)

    comp_op  go to state 58


state 115

    8 ty: ID .

    $default  reduce using rule 8 (ty)


state 116

    9 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 111

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 126


state 117

   10 ty: ARRAY . OF ID

    OF  shift, and go to state 127


state 118

    7 tydec: TYPE ID EQ ty .

    $default  reduce using rule 7 (tydec)


state 119

   36 exp: LET decs IN explist END .

    $default  reduce using rule 36 (exp)


state 120

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   62 arr_exp: ID LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 62 (arr_exp)]
    MINUS     [reduce using rule 62 (arr_exp)]
    TIMES     [reduce using rule 62 (arr_exp)]
    DIVIDE    [reduce using rule 62 (arr_exp)]
    EQ        [reduce using rule 62 (arr_exp)]
    NEQ       [reduce using rule 62 (arr_exp)]
    LT        [reduce using rule 62 (arr_exp)]
    LE        [reduce using rule 62 (arr_exp)]
    GT        [reduce using rule 62 (arr_exp)]
    GE        [reduce using rule 62 (arr_exp)]
    AND       [reduce using rule 62 (arr_exp)]
    OR        [reduce using rule 62 (arr_exp)]
    $default  reduce using rule 62 (arr_exp)

    comp_op  go to state 58


state 121

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   65 if_exp: IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 65 (if_exp)]
    MINUS     [reduce using rule 65 (if_exp)]
    TIMES     [reduce using rule 65 (if_exp)]
    DIVIDE    [reduce using rule 65 (if_exp)]
    EQ        [reduce using rule 65 (if_exp)]
    NEQ       [reduce using rule 65 (if_exp)]
    LT        [reduce using rule 65 (if_exp)]
    LE        [reduce using rule 65 (if_exp)]
    GT        [reduce using rule 65 (if_exp)]
    GE        [reduce using rule 65 (if_exp)]
    AND       [reduce using rule 65 (if_exp)]
    OR        [reduce using rule 65 (if_exp)]
    $default  reduce using rule 65 (if_exp)

    comp_op  go to state 58


state 122

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   67 for_exp: FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57
    DO      shift, and go to state 128

    comp_op  go to state 58


state 123

   12 tyfields: ID COLON . ID
   13         | ID COLON . ID COMMA tyfields

    ID  shift, and go to state 129


state 124

   16 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   17       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 130
    EQ     shift, and go to state 131


state 125

   15 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 132
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 126

    9 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 133


state 127

   10 ty: ARRAY OF . ID

    ID  shift, and go to state 134


state 128

   67 for_exp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 135
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 129

   12 tyfields: ID COLON ID .
   13         | ID COLON ID . COMMA tyfields

    COMMA  shift, and go to state 136

    $default  reduce using rule 12 (tyfields)


state 130

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 137


state 131

   16 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 138
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 132

   15 vardec: VAR ID COLON ID ASSIGN exp .
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 15 (vardec)

    comp_op  go to state 58


state 133

    9 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 9 (ty)


state 134

   10 ty: ARRAY OF ID .

    $default  reduce using rule 10 (ty)


state 135

   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp
   67 for_exp: FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    PLUS      [reduce using rule 67 (for_exp)]
    MINUS     [reduce using rule 67 (for_exp)]
    TIMES     [reduce using rule 67 (for_exp)]
    DIVIDE    [reduce using rule 67 (for_exp)]
    EQ        [reduce using rule 67 (for_exp)]
    NEQ       [reduce using rule 67 (for_exp)]
    LT        [reduce using rule 67 (for_exp)]
    LE        [reduce using rule 67 (for_exp)]
    GT        [reduce using rule 67 (for_exp)]
    GE        [reduce using rule 67 (for_exp)]
    AND       [reduce using rule 67 (for_exp)]
    OR        [reduce using rule 67 (for_exp)]
    $default  reduce using rule 67 (for_exp)

    comp_op  go to state 58


state 136

   13 tyfields: ID COLON ID COMMA . tyfields

    ID  shift, and go to state 111

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 139


state 137

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 140


state 138

   16 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 16 (fundec)

    comp_op  go to state 58


state 139

   13 tyfields: ID COLON ID COMMA tyfields .

    $default  reduce using rule 13 (tyfields)


state 140

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)

    exp          go to state 141
    lvalue       go to state 14
    arith_exp    go to state 15
    funcall_exp  go to state 16
    comp_exp     go to state 17
    strcomp_exp  go to state 18
    boolop_exp   go to state 19
    rec_exp      go to state 20
    arr_exp      go to state 21
    assign_exp   go to state 22
    if_exp       go to state 23
    while_exp    go to state 24
    for_exp      go to state 25


state 141

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .
   40 arith_exp: exp . PLUS exp
   41          | exp . MINUS exp
   42          | exp . TIMES exp
   43          | exp . DIVIDE exp
   46 comp_exp: exp . comp_op exp
   54 boolop_exp: exp . AND exp
   55           | exp . OR exp

    PLUS    shift, and go to state 52
    MINUS   shift, and go to state 53
    TIMES   shift, and go to state 54
    DIVIDE  shift, and go to state 55
    EQ      shift, and go to state 30
    NEQ     shift, and go to state 31
    LT      shift, and go to state 32
    LE      shift, and go to state 33
    GT      shift, and go to state 34
    GE      shift, and go to state 35
    AND     shift, and go to state 56
    OR      shift, and go to state 57

    $default  reduce using rule 17 (fundec)

    comp_op  go to state 58
