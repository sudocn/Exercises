State 0 conflicts: 1 shift/reduce
State 1 conflicts: 1 reduce/reduce
State 2 conflicts: 6 shift/reduce
State 4 conflicts: 1 shift/reduce
State 5 conflicts: 1 shift/reduce
State 6 conflicts: 1 shift/reduce
State 7 conflicts: 1 shift/reduce
State 27 conflicts: 1 shift/reduce
State 35 conflicts: 1 shift/reduce
State 37 conflicts: 6 shift/reduce
State 50 conflicts: 1 shift/reduce
State 53 conflicts: 1 shift/reduce
State 54 conflicts: 1 shift/reduce
State 55 conflicts: 1 shift/reduce
State 56 conflicts: 1 shift/reduce
State 57 conflicts: 1 shift/reduce
State 58 conflicts: 1 shift/reduce
State 59 conflicts: 1 shift/reduce
State 60 conflicts: 1 shift/reduce
State 62 conflicts: 1 shift/reduce
State 66 conflicts: 1 shift/reduce
State 69 conflicts: 1 shift/reduce
State 70 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 76 conflicts: 1 shift/reduce
State 82 conflicts: 6 shift/reduce
State 83 conflicts: 6 shift/reduce
State 84 conflicts: 6 shift/reduce
State 85 conflicts: 6 shift/reduce
State 86 conflicts: 12 shift/reduce
State 87 conflicts: 12 shift/reduce
State 88 conflicts: 12 shift/reduce
State 91 conflicts: 12 shift/reduce
State 92 conflicts: 1 shift/reduce
State 96 conflicts: 13 shift/reduce
State 97 conflicts: 12 shift/reduce
State 101 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 124 conflicts: 12 shift/reduce
State 128 conflicts: 1 shift/reduce
State 131 conflicts: 12 shift/reduce
State 132 conflicts: 1 shift/reduce
State 135 conflicts: 1 shift/reduce
State 139 conflicts: 12 shift/reduce
State 144 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 decs: /* empty */
    3     | dec decs

    4 dec: tydec
    5    | vardec
    6    | fundec

    7 tydec: TYPE type_id EQ ty

    8 ty: type_id
    9   | LBRACE tyfields RBRACE
   10   | ARRAY OF type_id

   11 tyfields: /* empty */
   12         | ID COLON type_id
   13         | ID COLON type_id COMMA tyfields

   14 type_id: ID

   15 vardec: VAR ID ASSIGN exp
   16       | VAR ID COLON type_id ASSIGN exp

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ exp

   19 exp: /* empty */
   20    | lvalue
   21    | LPAREN explist RPAREN
   22    | INT
   23    | NIL
   24    | STRING
   25    | funcall_exp
   26    | arith_exp
   27    | comp_exp
   28    | strcomp_exp
   29    | boolop_exp
   30    | rec_exp
   31    | arr_exp
   32    | assign_exp
   33    | if_exp
   34    | while_exp
   35    | for_exp
   36    | BREAK
   37    | LET decs IN explist END
   38    | LPAREN exp RPAREN

   39 lvalue: ID
   40       | lvalue DOT ID
   41       | lvalue LBRACK exp RBRACK

   42 arith_exp: exp PLUS exp
   43          | exp MINUS exp
   44          | exp TIMES exp
   45          | exp DIVIDE exp
   46          | MINUS exp

   47 funcall_exp: ID LPAREN arglist RPAREN

   48 comp_exp: exp comp_op exp

   49 strcomp_exp: STRING comp_op STRING

   50 comp_op: EQ
   51        | NEQ
   52        | LT
   53        | LE
   54        | GT
   55        | GE

   56 boolop_exp: exp AND exp
   57           | exp OR exp

   58 rec_exp: type_id NIL
   59        | type_id LBRACE rec_list RBRACE

   60 rec_list: /* empty */
   61         | rec_item
   62         | rec_item COMMA rec_list

   63 rec_item: ID EQ exp

   64 arr_exp: type_id LBRACK exp RBRACK OF exp

   65 assign_exp: lvalue ASSIGN exp

   66 if_exp: IF exp THEN exp
   67       | IF exp THEN exp ELSE exp

   68 while_exp: WHILE exp DO exp

   69 for_exp: FOR ID ASSIGN exp TO exp DO exp

   70 explist: exp
   71        | exp SEMICOLON explist

   72 arglist: exp
   73        | exp COMMA arglist


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 12 13 14 15 16 17 18 39 40 47 63 69
STRING (259) 24 49
INT (260) 22
COMMA (261) 13 62 73
COLON (262) 12 13 16 18
SEMICOLON (263) 71
LPAREN (264) 17 18 21 38 47
RPAREN (265) 17 18 21 38 47
LBRACK (266) 41 64
RBRACK (267) 41 64
LBRACE (268) 9 59
RBRACE (269) 9 59
DOT (270) 40
PLUS (271) 42
MINUS (272) 43 46
TIMES (273) 44
DIVIDE (274) 45
EQ (275) 7 17 18 50 63
NEQ (276) 51
LT (277) 52
LE (278) 53
GT (279) 54
GE (280) 55
UMINUS (281)
AND (282) 56
OR (283) 57
ASSIGN (284) 15 16 65 69
ARRAY (285) 10
IF (286) 66 67
THEN (287) 66 67
ELSE (288) 67
WHILE (289) 68
FOR (290) 69
TO (291) 69
DO (292) 68 69
LET (293) 37
IN (294) 37
END (295) 37
OF (296) 10 64
BREAK (297) 36
NIL (298) 23 58
FUNCTION (299) 17 18
VAR (300) 15 16
TYPE (301) 7


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
decs (49)
    on left: 2 3, on right: 3 37
dec (50)
    on left: 4 5 6, on right: 3
tydec (51)
    on left: 7, on right: 4
ty (52)
    on left: 8 9 10, on right: 7
tyfields (53)
    on left: 11 12 13, on right: 9 13 17 18
type_id (54)
    on left: 14, on right: 7 8 10 12 13 16 18 58 59 64
vardec (55)
    on left: 15 16, on right: 5
fundec (56)
    on left: 17 18, on right: 6
exp (57)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
    37 38, on right: 1 15 16 17 18 38 41 42 43 44 45 46 48 56 57 63
    64 65 66 67 68 69 70 71 72 73
lvalue (58)
    on left: 39 40 41, on right: 20 40 41 65
arith_exp (59)
    on left: 42 43 44 45 46, on right: 26
funcall_exp (60)
    on left: 47, on right: 25
comp_exp (61)
    on left: 48, on right: 27
strcomp_exp (62)
    on left: 49, on right: 28
comp_op (63)
    on left: 50 51 52 53 54 55, on right: 48 49
boolop_exp (64)
    on left: 56 57, on right: 29
rec_exp (65)
    on left: 58 59, on right: 30
rec_list (66)
    on left: 60 61 62, on right: 59 62
rec_item (67)
    on left: 63, on right: 61 62
arr_exp (68)
    on left: 64, on right: 31
assign_exp (69)
    on left: 65, on right: 32
if_exp (70)
    on left: 66 67, on right: 33
while_exp (71)
    on left: 68, on right: 34
for_exp (72)
    on left: 69, on right: 35
explist (73)
    on left: 70 71, on right: 21 37 71
arglist (74)
    on left: 72 73, on right: 47 73


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    program      go to state 12
    type_id      go to state 13
    exp          go to state 14
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 1

   14 type_id: ID .
   39 lvalue: ID .
   47 funcall_exp: ID . LPAREN arglist RPAREN

    LPAREN  shift, and go to state 27

    LBRACK    reduce using rule 14 (type_id)
    LBRACK    [reduce using rule 39 (lvalue)]
    LBRACE    reduce using rule 14 (type_id)
    NIL       reduce using rule 14 (type_id)
    $default  reduce using rule 39 (lvalue)


state 2

   24 exp: STRING .
   49 strcomp_exp: STRING . comp_op STRING

    EQ   shift, and go to state 28
    NEQ  shift, and go to state 29
    LT   shift, and go to state 30
    LE   shift, and go to state 31
    GT   shift, and go to state 32
    GE   shift, and go to state 33

    EQ        [reduce using rule 24 (exp)]
    NEQ       [reduce using rule 24 (exp)]
    LT        [reduce using rule 24 (exp)]
    LE        [reduce using rule 24 (exp)]
    GT        [reduce using rule 24 (exp)]
    GE        [reduce using rule 24 (exp)]
    $default  reduce using rule 24 (exp)

    comp_op  go to state 34


state 3

   22 exp: INT .

    $default  reduce using rule 22 (exp)


state 4

   21 exp: LPAREN . explist RPAREN
   38    | LPAREN . exp RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 35
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26
    explist      go to state 36


state 5

   46 arith_exp: MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 37
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 6

   66 if_exp: IF . exp THEN exp
   67       | IF . exp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 38
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 7

   68 while_exp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 39
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 8

   69 for_exp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 40


state 9

   37 exp: LET . decs IN explist END

    FUNCTION  shift, and go to state 41
    VAR       shift, and go to state 42
    TYPE      shift, and go to state 43

    $default  reduce using rule 2 (decs)

    decs    go to state 44
    dec     go to state 45
    tydec   go to state 46
    vardec  go to state 47
    fundec  go to state 48


state 10

   36 exp: BREAK .

    $default  reduce using rule 36 (exp)


state 11

   23 exp: NIL .

    $default  reduce using rule 23 (exp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 49


state 13

   58 rec_exp: type_id . NIL
   59        | type_id . LBRACE rec_list RBRACE
   64 arr_exp: type_id . LBRACK exp RBRACK OF exp

    LBRACK  shift, and go to state 50
    LBRACE  shift, and go to state 51
    NIL     shift, and go to state 52


state 14

    1 program: exp .
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 1 (program)

    comp_op  go to state 59


state 15

   20 exp: lvalue .
   40 lvalue: lvalue . DOT ID
   41       | lvalue . LBRACK exp RBRACK
   65 assign_exp: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 60
    DOT     shift, and go to state 61
    ASSIGN  shift, and go to state 62

    $default  reduce using rule 20 (exp)


state 16

   26 exp: arith_exp .

    $default  reduce using rule 26 (exp)


state 17

   25 exp: funcall_exp .

    $default  reduce using rule 25 (exp)


state 18

   27 exp: comp_exp .

    $default  reduce using rule 27 (exp)


state 19

   28 exp: strcomp_exp .

    $default  reduce using rule 28 (exp)


state 20

   29 exp: boolop_exp .

    $default  reduce using rule 29 (exp)


state 21

   30 exp: rec_exp .

    $default  reduce using rule 30 (exp)


state 22

   31 exp: arr_exp .

    $default  reduce using rule 31 (exp)


state 23

   32 exp: assign_exp .

    $default  reduce using rule 32 (exp)


state 24

   33 exp: if_exp .

    $default  reduce using rule 33 (exp)


state 25

   34 exp: while_exp .

    $default  reduce using rule 34 (exp)


state 26

   35 exp: for_exp .

    $default  reduce using rule 35 (exp)


state 27

   47 funcall_exp: ID LPAREN . arglist RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 63
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26
    arglist      go to state 64


state 28

   50 comp_op: EQ .

    $default  reduce using rule 50 (comp_op)


state 29

   51 comp_op: NEQ .

    $default  reduce using rule 51 (comp_op)


state 30

   52 comp_op: LT .

    $default  reduce using rule 52 (comp_op)


state 31

   53 comp_op: LE .

    $default  reduce using rule 53 (comp_op)


state 32

   54 comp_op: GT .

    $default  reduce using rule 54 (comp_op)


state 33

   55 comp_op: GE .

    $default  reduce using rule 55 (comp_op)


state 34

   49 strcomp_exp: STRING comp_op . STRING

    STRING  shift, and go to state 65


state 35

   38 exp: LPAREN exp . RPAREN
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   70 explist: exp .
   71        | exp . SEMICOLON explist

    SEMICOLON  shift, and go to state 66
    RPAREN     shift, and go to state 67
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    TIMES      shift, and go to state 55
    DIVIDE     shift, and go to state 56
    EQ         shift, and go to state 28
    NEQ        shift, and go to state 29
    LT         shift, and go to state 30
    LE         shift, and go to state 31
    GT         shift, and go to state 32
    GE         shift, and go to state 33
    AND        shift, and go to state 57
    OR         shift, and go to state 58

    RPAREN  [reduce using rule 70 (explist)]

    comp_op  go to state 59


state 36

   21 exp: LPAREN explist . RPAREN

    RPAREN  shift, and go to state 68


state 37

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   46          | MINUS exp .
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    LT   shift, and go to state 30
    LE   shift, and go to state 31
    GT   shift, and go to state 32
    GE   shift, and go to state 33
    AND  shift, and go to state 57
    OR   shift, and go to state 58

    LT        [reduce using rule 46 (arith_exp)]
    LE        [reduce using rule 46 (arith_exp)]
    GT        [reduce using rule 46 (arith_exp)]
    GE        [reduce using rule 46 (arith_exp)]
    AND       [reduce using rule 46 (arith_exp)]
    OR        [reduce using rule 46 (arith_exp)]
    $default  reduce using rule 46 (arith_exp)

    comp_op  go to state 59


state 38

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   66 if_exp: IF exp . THEN exp
   67       | IF exp . THEN exp ELSE exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58
    THEN    shift, and go to state 69

    comp_op  go to state 59


state 39

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   68 while_exp: WHILE exp . DO exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58
    DO      shift, and go to state 70

    comp_op  go to state 59


state 40

   69 for_exp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 71


state 41

   17 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION . ID LPAREN tyfields RPAREN COLON type_id EQ exp

    ID  shift, and go to state 72


state 42

   15 vardec: VAR . ID ASSIGN exp
   16       | VAR . ID COLON type_id ASSIGN exp

    ID  shift, and go to state 73


state 43

    7 tydec: TYPE . type_id EQ ty

    ID  shift, and go to state 74

    type_id  go to state 75


state 44

   37 exp: LET decs . IN explist END

    IN  shift, and go to state 76


state 45

    3 decs: dec . decs

    FUNCTION  shift, and go to state 41
    VAR       shift, and go to state 42
    TYPE      shift, and go to state 43

    $default  reduce using rule 2 (decs)

    decs    go to state 77
    dec     go to state 45
    tydec   go to state 46
    vardec  go to state 47
    fundec  go to state 48


state 46

    4 dec: tydec .

    $default  reduce using rule 4 (dec)


state 47

    5 dec: vardec .

    $default  reduce using rule 5 (dec)


state 48

    6 dec: fundec .

    $default  reduce using rule 6 (dec)


state 49

    0 $accept: program $end .

    $default  accept


state 50

   64 arr_exp: type_id LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 78
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 51

   59 rec_exp: type_id LBRACE . rec_list RBRACE

    ID  shift, and go to state 79

    $default  reduce using rule 60 (rec_list)

    rec_list  go to state 80
    rec_item  go to state 81


state 52

   58 rec_exp: type_id NIL .

    $default  reduce using rule 58 (rec_exp)


state 53

   42 arith_exp: exp PLUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 82
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 54

   43 arith_exp: exp MINUS . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 83
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 55

   44 arith_exp: exp TIMES . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 84
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 56

   45 arith_exp: exp DIVIDE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 85
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 57

   56 boolop_exp: exp AND . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 86
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 58

   57 boolop_exp: exp OR . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 87
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 59

   48 comp_exp: exp comp_op . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 88
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 60

   41 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 89
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 61

   40 lvalue: lvalue DOT . ID

    ID  shift, and go to state 90


state 62

   65 assign_exp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 91
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 63

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   72 arglist: exp .
   73        | exp . COMMA arglist

    COMMA   shift, and go to state 92
    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 72 (arglist)

    comp_op  go to state 59


state 64

   47 funcall_exp: ID LPAREN arglist . RPAREN

    RPAREN  shift, and go to state 93


state 65

   49 strcomp_exp: STRING comp_op STRING .

    $default  reduce using rule 49 (strcomp_exp)


state 66

   71 explist: exp SEMICOLON . explist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 94
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26
    explist      go to state 95


state 67

   38 exp: LPAREN exp RPAREN .

    $default  reduce using rule 38 (exp)


state 68

   21 exp: LPAREN explist RPAREN .

    $default  reduce using rule 21 (exp)


state 69

   66 if_exp: IF exp THEN . exp
   67       | IF exp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 96
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 70

   68 while_exp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 97
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 71

   69 for_exp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 98
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 72

   17 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   18       | FUNCTION ID . LPAREN tyfields RPAREN COLON type_id EQ exp

    LPAREN  shift, and go to state 99


state 73

   15 vardec: VAR ID . ASSIGN exp
   16       | VAR ID . COLON type_id ASSIGN exp

    COLON   shift, and go to state 100
    ASSIGN  shift, and go to state 101


state 74

   14 type_id: ID .

    $default  reduce using rule 14 (type_id)


state 75

    7 tydec: TYPE type_id . EQ ty

    EQ  shift, and go to state 102


state 76

   37 exp: LET decs IN . explist END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 94
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26
    explist      go to state 103


state 77

    3 decs: dec decs .

    $default  reduce using rule 3 (decs)


state 78

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   64 arr_exp: type_id LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 104
    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    comp_op  go to state 59


state 79

   63 rec_item: ID . EQ exp

    EQ  shift, and go to state 105


state 80

   59 rec_exp: type_id LBRACE rec_list . RBRACE

    RBRACE  shift, and go to state 106


state 81

   61 rec_list: rec_item .
   62         | rec_item . COMMA rec_list

    COMMA  shift, and go to state 107

    $default  reduce using rule 61 (rec_list)


state 82

   42 arith_exp: exp . PLUS exp
   42          | exp PLUS exp .
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    LT        [reduce using rule 42 (arith_exp)]
    LE        [reduce using rule 42 (arith_exp)]
    GT        [reduce using rule 42 (arith_exp)]
    GE        [reduce using rule 42 (arith_exp)]
    AND       [reduce using rule 42 (arith_exp)]
    OR        [reduce using rule 42 (arith_exp)]
    $default  reduce using rule 42 (arith_exp)

    comp_op  go to state 59


state 83

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   43          | exp MINUS exp .
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    LT        [reduce using rule 43 (arith_exp)]
    LE        [reduce using rule 43 (arith_exp)]
    GT        [reduce using rule 43 (arith_exp)]
    GE        [reduce using rule 43 (arith_exp)]
    AND       [reduce using rule 43 (arith_exp)]
    OR        [reduce using rule 43 (arith_exp)]
    $default  reduce using rule 43 (arith_exp)

    comp_op  go to state 59


state 84

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   44          | exp TIMES exp .
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    LT   shift, and go to state 30
    LE   shift, and go to state 31
    GT   shift, and go to state 32
    GE   shift, and go to state 33
    AND  shift, and go to state 57
    OR   shift, and go to state 58

    LT        [reduce using rule 44 (arith_exp)]
    LE        [reduce using rule 44 (arith_exp)]
    GT        [reduce using rule 44 (arith_exp)]
    GE        [reduce using rule 44 (arith_exp)]
    AND       [reduce using rule 44 (arith_exp)]
    OR        [reduce using rule 44 (arith_exp)]
    $default  reduce using rule 44 (arith_exp)

    comp_op  go to state 59


state 85

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   45          | exp DIVIDE exp .
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    LT   shift, and go to state 30
    LE   shift, and go to state 31
    GT   shift, and go to state 32
    GE   shift, and go to state 33
    AND  shift, and go to state 57
    OR   shift, and go to state 58

    LT        [reduce using rule 45 (arith_exp)]
    LE        [reduce using rule 45 (arith_exp)]
    GT        [reduce using rule 45 (arith_exp)]
    GE        [reduce using rule 45 (arith_exp)]
    AND       [reduce using rule 45 (arith_exp)]
    OR        [reduce using rule 45 (arith_exp)]
    $default  reduce using rule 45 (arith_exp)

    comp_op  go to state 59


state 86

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   56           | exp AND exp .
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 56 (boolop_exp)]
    MINUS     [reduce using rule 56 (boolop_exp)]
    TIMES     [reduce using rule 56 (boolop_exp)]
    DIVIDE    [reduce using rule 56 (boolop_exp)]
    EQ        [reduce using rule 56 (boolop_exp)]
    NEQ       [reduce using rule 56 (boolop_exp)]
    LT        [reduce using rule 56 (boolop_exp)]
    LE        [reduce using rule 56 (boolop_exp)]
    GT        [reduce using rule 56 (boolop_exp)]
    GE        [reduce using rule 56 (boolop_exp)]
    AND       [reduce using rule 56 (boolop_exp)]
    OR        [reduce using rule 56 (boolop_exp)]
    $default  reduce using rule 56 (boolop_exp)

    comp_op  go to state 59


state 87

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   57           | exp OR exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 57 (boolop_exp)]
    MINUS     [reduce using rule 57 (boolop_exp)]
    TIMES     [reduce using rule 57 (boolop_exp)]
    DIVIDE    [reduce using rule 57 (boolop_exp)]
    EQ        [reduce using rule 57 (boolop_exp)]
    NEQ       [reduce using rule 57 (boolop_exp)]
    LT        [reduce using rule 57 (boolop_exp)]
    LE        [reduce using rule 57 (boolop_exp)]
    GT        [reduce using rule 57 (boolop_exp)]
    GE        [reduce using rule 57 (boolop_exp)]
    AND       [reduce using rule 57 (boolop_exp)]
    OR        [reduce using rule 57 (boolop_exp)]
    $default  reduce using rule 57 (boolop_exp)

    comp_op  go to state 59


state 88

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   48         | exp comp_op exp .
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 48 (comp_exp)]
    MINUS     [reduce using rule 48 (comp_exp)]
    TIMES     [reduce using rule 48 (comp_exp)]
    DIVIDE    [reduce using rule 48 (comp_exp)]
    EQ        [reduce using rule 48 (comp_exp)]
    NEQ       [reduce using rule 48 (comp_exp)]
    LT        [reduce using rule 48 (comp_exp)]
    LE        [reduce using rule 48 (comp_exp)]
    GT        [reduce using rule 48 (comp_exp)]
    GE        [reduce using rule 48 (comp_exp)]
    AND       [reduce using rule 48 (comp_exp)]
    OR        [reduce using rule 48 (comp_exp)]
    $default  reduce using rule 48 (comp_exp)

    comp_op  go to state 59


state 89

   41 lvalue: lvalue LBRACK exp . RBRACK
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    RBRACK  shift, and go to state 108
    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    comp_op  go to state 59


state 90

   40 lvalue: lvalue DOT ID .

    $default  reduce using rule 40 (lvalue)


state 91

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   65 assign_exp: lvalue ASSIGN exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 65 (assign_exp)]
    MINUS     [reduce using rule 65 (assign_exp)]
    TIMES     [reduce using rule 65 (assign_exp)]
    DIVIDE    [reduce using rule 65 (assign_exp)]
    EQ        [reduce using rule 65 (assign_exp)]
    NEQ       [reduce using rule 65 (assign_exp)]
    LT        [reduce using rule 65 (assign_exp)]
    LE        [reduce using rule 65 (assign_exp)]
    GT        [reduce using rule 65 (assign_exp)]
    GE        [reduce using rule 65 (assign_exp)]
    AND       [reduce using rule 65 (assign_exp)]
    OR        [reduce using rule 65 (assign_exp)]
    $default  reduce using rule 65 (assign_exp)

    comp_op  go to state 59


state 92

   73 arglist: exp COMMA . arglist

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 63
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26
    arglist      go to state 109


state 93

   47 funcall_exp: ID LPAREN arglist RPAREN .

    $default  reduce using rule 47 (funcall_exp)


state 94

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   70 explist: exp .
   71        | exp . SEMICOLON explist

    SEMICOLON  shift, and go to state 66
    PLUS       shift, and go to state 53
    MINUS      shift, and go to state 54
    TIMES      shift, and go to state 55
    DIVIDE     shift, and go to state 56
    EQ         shift, and go to state 28
    NEQ        shift, and go to state 29
    LT         shift, and go to state 30
    LE         shift, and go to state 31
    GT         shift, and go to state 32
    GE         shift, and go to state 33
    AND        shift, and go to state 57
    OR         shift, and go to state 58

    $default  reduce using rule 70 (explist)

    comp_op  go to state 59


state 95

   71 explist: exp SEMICOLON explist .

    $default  reduce using rule 71 (explist)


state 96

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   66 if_exp: IF exp THEN exp .
   67       | IF exp THEN exp . ELSE exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58
    ELSE    shift, and go to state 110

    PLUS      [reduce using rule 66 (if_exp)]
    MINUS     [reduce using rule 66 (if_exp)]
    TIMES     [reduce using rule 66 (if_exp)]
    DIVIDE    [reduce using rule 66 (if_exp)]
    EQ        [reduce using rule 66 (if_exp)]
    NEQ       [reduce using rule 66 (if_exp)]
    LT        [reduce using rule 66 (if_exp)]
    LE        [reduce using rule 66 (if_exp)]
    GT        [reduce using rule 66 (if_exp)]
    GE        [reduce using rule 66 (if_exp)]
    AND       [reduce using rule 66 (if_exp)]
    OR        [reduce using rule 66 (if_exp)]
    ELSE      [reduce using rule 66 (if_exp)]
    $default  reduce using rule 66 (if_exp)

    comp_op  go to state 59


state 97

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   68 while_exp: WHILE exp DO exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 68 (while_exp)]
    MINUS     [reduce using rule 68 (while_exp)]
    TIMES     [reduce using rule 68 (while_exp)]
    DIVIDE    [reduce using rule 68 (while_exp)]
    EQ        [reduce using rule 68 (while_exp)]
    NEQ       [reduce using rule 68 (while_exp)]
    LT        [reduce using rule 68 (while_exp)]
    LE        [reduce using rule 68 (while_exp)]
    GT        [reduce using rule 68 (while_exp)]
    GE        [reduce using rule 68 (while_exp)]
    AND       [reduce using rule 68 (while_exp)]
    OR        [reduce using rule 68 (while_exp)]
    $default  reduce using rule 68 (while_exp)

    comp_op  go to state 59


state 98

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   69 for_exp: FOR ID ASSIGN exp . TO exp DO exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58
    TO      shift, and go to state 111

    comp_op  go to state 59


state 99

   17 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   18       | FUNCTION ID LPAREN . tyfields RPAREN COLON type_id EQ exp

    ID  shift, and go to state 112

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 113


state 100

   16 vardec: VAR ID COLON . type_id ASSIGN exp

    ID  shift, and go to state 74

    type_id  go to state 114


state 101

   15 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 115
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 102

    7 tydec: TYPE type_id EQ . ty

    ID      shift, and go to state 74
    LBRACE  shift, and go to state 116
    ARRAY   shift, and go to state 117

    ty       go to state 118
    type_id  go to state 119


state 103

   37 exp: LET decs IN explist . END

    END  shift, and go to state 120


state 104

   64 arr_exp: type_id LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 121


state 105

   63 rec_item: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 122
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 106

   59 rec_exp: type_id LBRACE rec_list RBRACE .

    $default  reduce using rule 59 (rec_exp)


state 107

   62 rec_list: rec_item COMMA . rec_list

    ID  shift, and go to state 79

    $default  reduce using rule 60 (rec_list)

    rec_list  go to state 123
    rec_item  go to state 81


state 108

   41 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 41 (lvalue)


state 109

   73 arglist: exp COMMA arglist .

    $default  reduce using rule 73 (arglist)


state 110

   67 if_exp: IF exp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 124
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 111

   69 for_exp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 125
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 112

   12 tyfields: ID . COLON type_id
   13         | ID . COLON type_id COMMA tyfields

    COLON  shift, and go to state 126


state 113

   17 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   18       | FUNCTION ID LPAREN tyfields . RPAREN COLON type_id EQ exp

    RPAREN  shift, and go to state 127


state 114

   16 vardec: VAR ID COLON type_id . ASSIGN exp

    ASSIGN  shift, and go to state 128


state 115

   15 vardec: VAR ID ASSIGN exp .
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 15 (vardec)

    comp_op  go to state 59


state 116

    9 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 112

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 129


state 117

   10 ty: ARRAY . OF type_id

    OF  shift, and go to state 130


state 118

    7 tydec: TYPE type_id EQ ty .

    $default  reduce using rule 7 (tydec)


state 119

    8 ty: type_id .

    $default  reduce using rule 8 (ty)


state 120

   37 exp: LET decs IN explist END .

    $default  reduce using rule 37 (exp)


state 121

   64 arr_exp: type_id LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 131
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 122

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   63 rec_item: ID EQ exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 63 (rec_item)

    comp_op  go to state 59


state 123

   62 rec_list: rec_item COMMA rec_list .

    $default  reduce using rule 62 (rec_list)


state 124

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   67 if_exp: IF exp THEN exp ELSE exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 67 (if_exp)]
    MINUS     [reduce using rule 67 (if_exp)]
    TIMES     [reduce using rule 67 (if_exp)]
    DIVIDE    [reduce using rule 67 (if_exp)]
    EQ        [reduce using rule 67 (if_exp)]
    NEQ       [reduce using rule 67 (if_exp)]
    LT        [reduce using rule 67 (if_exp)]
    LE        [reduce using rule 67 (if_exp)]
    GT        [reduce using rule 67 (if_exp)]
    GE        [reduce using rule 67 (if_exp)]
    AND       [reduce using rule 67 (if_exp)]
    OR        [reduce using rule 67 (if_exp)]
    $default  reduce using rule 67 (if_exp)

    comp_op  go to state 59


state 125

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   69 for_exp: FOR ID ASSIGN exp TO exp . DO exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58
    DO      shift, and go to state 132

    comp_op  go to state 59


state 126

   12 tyfields: ID COLON . type_id
   13         | ID COLON . type_id COMMA tyfields

    ID  shift, and go to state 74

    type_id  go to state 133


state 127

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   18       | FUNCTION ID LPAREN tyfields RPAREN . COLON type_id EQ exp

    COLON  shift, and go to state 134
    EQ     shift, and go to state 135


state 128

   16 vardec: VAR ID COLON type_id ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 136
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 129

    9 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 137


state 130

   10 ty: ARRAY OF . type_id

    ID  shift, and go to state 74

    type_id  go to state 138


state 131

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   64 arr_exp: type_id LBRACK exp RBRACK OF exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 64 (arr_exp)]
    MINUS     [reduce using rule 64 (arr_exp)]
    TIMES     [reduce using rule 64 (arr_exp)]
    DIVIDE    [reduce using rule 64 (arr_exp)]
    EQ        [reduce using rule 64 (arr_exp)]
    NEQ       [reduce using rule 64 (arr_exp)]
    LT        [reduce using rule 64 (arr_exp)]
    LE        [reduce using rule 64 (arr_exp)]
    GT        [reduce using rule 64 (arr_exp)]
    GE        [reduce using rule 64 (arr_exp)]
    AND       [reduce using rule 64 (arr_exp)]
    OR        [reduce using rule 64 (arr_exp)]
    $default  reduce using rule 64 (arr_exp)

    comp_op  go to state 59


state 132

   69 for_exp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 139
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 133

   12 tyfields: ID COLON type_id .
   13         | ID COLON type_id . COMMA tyfields

    COMMA  shift, and go to state 140

    $default  reduce using rule 12 (tyfields)


state 134

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . type_id EQ exp

    ID  shift, and go to state 74

    type_id  go to state 141


state 135

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 142
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 136

   16 vardec: VAR ID COLON type_id ASSIGN exp .
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 16 (vardec)

    comp_op  go to state 59


state 137

    9 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 9 (ty)


state 138

   10 ty: ARRAY OF type_id .

    $default  reduce using rule 10 (ty)


state 139

   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp
   69 for_exp: FOR ID ASSIGN exp TO exp DO exp .

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    PLUS      [reduce using rule 69 (for_exp)]
    MINUS     [reduce using rule 69 (for_exp)]
    TIMES     [reduce using rule 69 (for_exp)]
    DIVIDE    [reduce using rule 69 (for_exp)]
    EQ        [reduce using rule 69 (for_exp)]
    NEQ       [reduce using rule 69 (for_exp)]
    LT        [reduce using rule 69 (for_exp)]
    LE        [reduce using rule 69 (for_exp)]
    GT        [reduce using rule 69 (for_exp)]
    GE        [reduce using rule 69 (for_exp)]
    AND       [reduce using rule 69 (for_exp)]
    OR        [reduce using rule 69 (for_exp)]
    $default  reduce using rule 69 (for_exp)

    comp_op  go to state 59


state 140

   13 tyfields: ID COLON type_id COMMA . tyfields

    ID  shift, and go to state 112

    $default  reduce using rule 11 (tyfields)

    tyfields  go to state 143


state 141

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON type_id . EQ exp

    EQ  shift, and go to state 144


state 142

   17 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 17 (fundec)

    comp_op  go to state 59


state 143

   13 tyfields: ID COLON type_id COMMA tyfields .

    $default  reduce using rule 13 (tyfields)


state 144

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    MINUS     [reduce using rule 19 (exp)]
    $default  reduce using rule 19 (exp)

    type_id      go to state 13
    exp          go to state 145
    lvalue       go to state 15
    arith_exp    go to state 16
    funcall_exp  go to state 17
    comp_exp     go to state 18
    strcomp_exp  go to state 19
    boolop_exp   go to state 20
    rec_exp      go to state 21
    arr_exp      go to state 22
    assign_exp   go to state 23
    if_exp       go to state 24
    while_exp    go to state 25
    for_exp      go to state 26


state 145

   18 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON type_id EQ exp .
   42 arith_exp: exp . PLUS exp
   43          | exp . MINUS exp
   44          | exp . TIMES exp
   45          | exp . DIVIDE exp
   48 comp_exp: exp . comp_op exp
   56 boolop_exp: exp . AND exp
   57           | exp . OR exp

    PLUS    shift, and go to state 53
    MINUS   shift, and go to state 54
    TIMES   shift, and go to state 55
    DIVIDE  shift, and go to state 56
    EQ      shift, and go to state 28
    NEQ     shift, and go to state 29
    LT      shift, and go to state 30
    LE      shift, and go to state 31
    GT      shift, and go to state 32
    GE      shift, and go to state 33
    AND     shift, and go to state 57
    OR      shift, and go to state 58

    $default  reduce using rule 18 (fundec)

    comp_op  go to state 59
