%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"
#include "symbol.h"
#include "absyn.h"

A_exp absyn_root;

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT
%token   
  EQ NEQ LT LE GT GE UMINUS
  ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc EQ NEQ LT LE GT GE
%left '|'
%left '&'
%left '+' '-'
%left '*' '/'
%left UMINUS

%start program
%%

program: 
    | exp

decs: 
    | dec decs 

dec: tydec
    | vardec
    | fundec

tydec: TYPE ID EQ ty
ty: ID
    | '{' tyfields '}'
	| ARRAY OF ID
tyfields: 
    | ID ':' ID
    |  ID ':' ID ',' tyfields

vardec: VAR ID ASSIGN exp
    | VAR ID ':' ID ASSIGN exp

fundec: FUNCTION ID '(' tyfields ')' EQ exp
    | FUNCTION ID '(' tyfields ')' ':' ID EQ exp

exp: lvalue
    | '(' explist ')'
    | INT
    | NIL
    | STRING
    | funcall_exp
    | arith_exp
    | comp_exp
    | boolop_exp
    | rec_exp
    | arr_exp
    | assign_exp
    | if_exp
    | while_exp
    | for_exp
    | BREAK
    | LET decs IN explist END
 
lvalue: ID
    | lvalue '.' ID
    | lvalue '[' exp ']'

arith_exp: exp '+' exp
    | exp '-' exp
    | exp '*' exp
    | exp '/' exp
    | '-' exp %prec UMINUS

funcall_exp: ID '(' arglist ')'

comp_exp: exp comp_op exp
/* strcomp_exp: STRING comp_op STRING */
comp_op: EQ | NEQ | LT | LE | GT | GE

boolop_exp: exp '&' exp
    | exp '|' exp

rec_exp: ID NIL
    | ID '{' rec_list '}'
rec_list: 
    | rec_item
    | rec_item ',' rec_list
rec_item: ID EQ exp

arr_exp: lvalue '[' exp ']' OF exp

assign_exp: lvalue ASSIGN exp

if_exp: IF exp THEN exp
    | IF exp THEN exp ELSE exp

while_exp: WHILE exp DO exp

for_exp: FOR ID ASSIGN exp TO exp DO exp

explist: 
    | exp 
    | exp ';' explist
arglist: 
    | exp
    | exp ',' arglist



%%
/*
     
*/
