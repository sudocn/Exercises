%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE UMINUS
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%nonassoc EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program: exp

decs: 
    | dec decs 

dec: tydec
    | vardec
    | fundec

tydec: TYPE ID EQ ty
ty: ID
    | LBRACE tyfields RBRACE
	| ARRAY OF ID
tyfields: 
    | ID COLON ID
    |  ID COLON ID COMMA tyfields

vardec: VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

exp: 
    | lvalue
    | LPAREN explist RPAREN
    | INT
    | NIL
    | STRING
    | funcall_exp
    | arith_exp
    | comp_exp
    | strcomp_exp
    | boolop_exp
    | rec_exp
    | arr_exp
    | assign_exp
    | if_exp
    | while_exp
    | for_exp
    | BREAK
    | LET decs IN explist END
 
lvalue: ID
    | lvalue DOT ID
    | lvalue LBRACK exp RBRACK

arith_exp: exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp
    | MINUS exp %prec UMINUS

funcall_exp: ID LPAREN arglist RPAREN

comp_exp: exp comp_op exp
strcomp_exp: STRING comp_op STRING
comp_op: EQ | NEQ | LT | LE | GT | GE

boolop_exp: exp AND exp
    | exp OR exp

rec_exp: ID NIL
    | ID LBRACE rec_list RBRACE
rec_list: 
    | rec_item
    | rec_item COMMA rec_list
rec_item: ID EQ exp

arr_exp: lvalue LBRACK exp RBRACK OF exp

assign_exp: lvalue ASSIGN exp

if_exp: IF exp THEN exp
    | IF exp THEN exp ELSE exp

while_exp: WHILE exp DO exp

for_exp: FOR ID ASSIGN exp TO exp DO exp

explist: exp 
    |exp SEMICOLON explist
arglist: exp
    | exp COMMA arglist



%%
/*
     
*/
